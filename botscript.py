import discord
from discord.ext import commands, tasks
import random
import json
import os
from datetime import datetime, timedelta
from PIL import Image
import requests
from io import BytesIO
import asyncio
import logging
from dotenv import load_dotenv


 #–£–∫–∞–∑—ã–≤–∞–µ—à—å —Å–≤–æ–π –ø—É—Ç—å –∫ .env
dotenv_path = r"C:\\Users\\SIM SIM\\OneDrive\\Desktop\\–ù–æ–≤–∞—è –ø–∞–ø–∫–∞\\confing.env"
load_dotenv(dotenv_path)

logging.basicConfig(level=logging.INFO)

DATA_FILE = "economy.json"
STORE_FILE = "store.json"
BANNER_PATH = "static/banners"
os.makedirs(BANNER_PATH, exist_ok=True)

intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

class DataManager:
    def __init__(self):
        self.economy = {"users": {}, "guilds": {}}
        self.store = {}
        self.lock = asyncio.Lock()

    async def load(self):
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                self.economy = json.load(f)
        else:
            self.economy = {"users": {}, "guilds": {}}

        if os.path.exists(STORE_FILE):
            with open(STORE_FILE, "r", encoding="utf-8") as f:
                self.store = json.load(f)
        else:
            self.store = {}

    async def save(self):
        async with self.lock:
            with open(DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(self.economy, f, ensure_ascii=False, indent=4)
            with open(STORE_FILE, "w", encoding="utf-8") as f:
                json.dump(self.store, f, ensure_ascii=False, indent=4)

def load_json(filename, default):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return default


store_items = load_json(STORE_FILE, {})

data_manager = DataManager()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –±—É—Ñ–µ—Ä–æ–º
save_task = None

def schedule_save():
    global save_task
    if save_task is None or save_task.done():
        save_task = asyncio.create_task(data_manager.save())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞ ---

def format_banner(image_bytes):
    img = Image.open(BytesIO(image_bytes)).convert("RGBA")
    target_width = 900
    target_height = 300
    target_ratio = target_width / target_height

    width, height = img.size
    current_ratio = width / height

    if current_ratio > target_ratio:
        new_width = int(height * target_ratio)
        left = (width - new_width) // 2
        right = left + new_width
        img = img.crop((left, 0, right, height))
    elif current_ratio < target_ratio:
        new_height = int(width / target_ratio)
        top = (height - new_height) // 2
        bottom = top + new_height
        img = img.crop((0, top, width, bottom))

    img = img.resize((target_width, target_height), Image.LANCZOS)

    output = BytesIO()
    img.save(output, format="PNG")
    output.seek(0)
    return output

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def today_str():
    return datetime.utcnow().date().isoformat()

def parse_date(date_str):
    try:
        return datetime.strptime(date_str, "%Y-%m-%d").date()
    except:
        return None

def cooldown_left(last_str, cooldown_days=1):
    if not last_str:
        return 0
    last_date = parse_date(last_str)
    if not last_date:
        return 0
    delta = datetime.utcnow().date() - last_date
    left = cooldown_days - delta.days
    return max(left, 0)

def format_time_left(days):
    if days == 0:
        return "–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"
    else:
        return f"–æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å {days} –¥."
        
# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
def time_left(last_time_str, cooldown_hours):
    if not last_time_str:
        return None
    try:
        last_time = datetime.strptime(last_time_str, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        # –µ—Å–ª–∏ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        last_time = datetime.strptime(last_time_str, "%Y-%m-%d")
        last_time = last_time.replace(hour=0, minute=0, second=0)

    now = datetime.utcnow()
    cooldown = timedelta(hours=cooldown_hours)
    if now < last_time + cooldown:
        remaining = (last_time + cooldown) - now
        hours, remainder = divmod(int(remaining.total_seconds()), 3600)
        minutes = remainder // 60
        return f"{hours} —á {minutes} –º–∏–Ω"
    return None

# --- –ö–æ–º–∞–Ω–¥—ã ---

@bot.event
async def on_ready():
    await data_manager.load()
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")

# !–±–∞–ª–∞–Ω—Å
@bot.command()
async def –±–∞–ª–∞–Ω—Å(ctx):
    user_id = str(ctx.author.id)
    user = economy["users"].setdefault(user_id, {
        "balance": 0, "guild": None, "items": [], "last_work": None, "last_daily": None
    })

    embed = discord.Embed(
        title=f"üí∞ –ë–∞–ª–∞–Ω—Å {ctx.author.display_name}",
        description=f"**{user['balance']} FFCoin**",
        color=discord.Color.gold()
    )
    embed.set_footer(text="Free Fire United üíô by TheDodo")
    await ctx.send(embed=embed)
    schedule_save()

# !—Ä–∞–±–æ—Ç–∞
@bot.command()
async def —Ä–∞–±–æ—Ç–∞(ctx):
    user_id = str(ctx.author.id)
    user = economy["users"].setdefault(user_id, {
        "balance": 0, "guild": None, "items": [], "last_work": None
    })

    cooldown_hours = 24
    left = time_left(user.get("last_work"), cooldown_hours)
    if left:
        embed = discord.Embed(
            title="üíº –†–∞–±–æ—Ç–∞",
            description=f"üïí –¢—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è!\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: **{left}**",
            color=discord.Color.gold()
        )
        await ctx.send(embed=embed)
        return

    reward = random.randint(99, 159)
    user["balance"] += reward
    user["last_work"] = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    schedule_save()

    embed = discord.Embed(
        title="üíº –†–∞–±–æ—Ç–∞",
        description=f"–¢—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª –∏ –ø–æ–ª—É—á–∏–ª **{reward} FFCoin**!",
        color=discord.Color.gold()
    )
    embed.add_field(name="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", value=f"**{user['balance']} FFCoin**", inline=False)
    embed.add_field(name="‚è≥ –°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞", value=f"**{cooldown_hours} —á**", inline=False)
    embed.set_footer(text="Free Fire United üíô by TheDodo")
    await ctx.send(embed=embed)


@bot.command()
async def –ª–∏–¥–µ—Ä—ã(ctx):
    top_users = sorted(
        economy["users"].items(),
        key=lambda x: x[1].get("balance", 0),
        reverse=True
    )[:10]

    embed = discord.Embed(
        title="üèÜ –¢–æ–ø-10 –±–æ–≥–∞—Ç–µ–π—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤",
        description="–°–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ FFCoin",
        color=discord.Color.gold()
    )

    for i, (uid, data) in enumerate(top_users, 1):
        user_mention = f"<@{uid}>"
        balance = data.get("balance", 0)
        embed.add_field(
            name=f"{i}. {user_mention}",
            value=f"üí∞ –ë–∞–ª–∞–Ω—Å: **{balance} FFCoin**",
            inline=False
        )

    embed.set_footer(text="Free Fire United üíô by TheDodo")
    await ctx.send(embed=embed) 


@bot.command()
async def —Å–æ–∑–¥–∞—Ç—å(ctx, *, –Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    user_id = str(ctx.author.id)
    user = economy["users"].setdefault(user_id, {"balance": 0, "guild": None})

    if user["guild"]:
        await ctx.send("‚ùå –¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥–∏–ª—å–¥–∏–∏.")
        return
    if user["balance"] < 10000:
        await ctx.send("üí∏ –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ FFCoin (–Ω—É–∂–Ω–æ 10,000).")
        return
    if –Ω–∞–∑–≤–∞–Ω–∏–µ in economy["guilds"]:
        await ctx.send("‚ö†Ô∏è –ì–∏–ª—å–¥–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    embed = discord.Embed(
        title="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –≥–∏–ª—å–¥–∏–∏",
        description=(
            "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏:\n"
            "üîì ‚Äî **–û—Ç–∫—Ä—ã—Ç–∞—è** (–≤—Å—Ç—É–ø–∏—Ç—å –º–æ–∂–µ—Ç –ª—é–±–æ–π)\n"
            "üìù ‚Äî **–ü–æ –∑–∞—è–≤–∫–µ** (–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)\n"
            "üîí ‚Äî **–ó–∞–∫—Ä—ã—Ç–∞—è** (—Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –≤–ª–∞–¥–µ–ª—å—Ü–∞)"
        ),
        color=discord.Color.gold()
    )
    msg = await ctx.send(embed=embed)
    await msg.add_reaction("üîì")
    await msg.add_reaction("üìù")
    await msg.add_reaction("üîí")

    def check(reaction, user_check):
        return (
            user_check == ctx.author and
            str(reaction.emoji) in ["üîì", "üìù", "üîí"] and
            reaction.message.id == msg.id
        )

    try:
        reaction, _ = await bot.wait_for("reaction_add", timeout=30.0, check=check)
    except asyncio.TimeoutError:
        await ctx.send("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –°–æ–∑–¥–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    if str(reaction.emoji) == "üîì":
        privacy = "open"
        privacy_text = "–û—Ç–∫—Ä—ã—Ç–∞—è"
    elif str(reaction.emoji) == "üìù":
        privacy = "request"
        privacy_text = "–ü–æ –∑–∞—è–≤–∫–µ"
    else:
        privacy = "closed"
        privacy_text = "–ó–∞–∫—Ä—ã—Ç–∞—è"

    user["balance"] -= 10000
    user["guild"] = –Ω–∞–∑–≤–∞–Ω–∏–µ
    economy["guilds"][–Ω–∞–∑–≤–∞–Ω–∏–µ] = {
        "owner": user_id,
        "banner": None,
        "avatar": None,
        "members": [user_id],
        "privacy": privacy
    }

    await ctx.send(f"üè∞ –ì–∏–ª—å–¥–∏—è **{–Ω–∞–∑–≤–∞–Ω–∏–µ}** —Å–æ–∑–¥–∞–Ω–∞! –¢–∏–ø: **{privacy_text}**")
    schedule_save()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä)
BANNER_PATH = "static/banners"  # –ø–∞–ø–∫–∞ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–æ–≤
os.makedirs(BANNER_PATH, exist_ok=True)

def format_banner(url):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL
    response = requests.get(url)
    img = Image.open(BytesIO(response.content))

    # –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –±–∞–Ω–Ω–µ—Ä–∞
    target_width = 900
    target_height = 300
    target_ratio = target_width / target_height

    # –û–±—Ä–µ–∑–∫–∞ –ø–æ–¥ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 3:1
    width, height = img.size
    current_ratio = width / height

    if current_ratio > target_ratio:
        # –°–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–æ–µ ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
        new_width = int(height * target_ratio)
        left = (width - new_width) // 2
        right = left + new_width
        img = img.crop((left, 0, right, height))
    elif current_ratio < target_ratio:
        # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
        new_height = int(width / target_ratio)
        top = (height - new_height) // 2
        bottom = top + new_height
        img = img.crop((0, top, width, bottom))

    # –ú–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ 900x300
    img = img.resize((target_width, target_height), Image.LANCZOS)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    output = BytesIO()
    img.save(output, format="PNG")
    output.seek(0)
    return output


# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≥–∏–ª—å–¥–∏–∏
# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
try:
    with open("economy.json", "r", encoding="utf-8") as f:
        economy = json.load(f)
except FileNotFoundError:
    economy = {"users": {}, "guilds": {}}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
def save_economy():
    with open("economy.json", "w", encoding="utf-8") as f:
        json.dump(economy, f, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∏–ª—å–¥–∏–∏
@bot.command()
async def –≥–∏–ª—å–¥–∏—è(ctx):
    user_id = str(ctx.author.id)
    user = economy["users"].get(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–∏–ª—å–¥–∏–π
    if not user or not user.get("guild"):
        if not economy["guilds"]:
            await ctx.send("üò¢ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥–∏–ª—å–¥–∏–∏.")
            return

        embed = discord.Embed(
            title="üè∞ –°–ø–∏—Å–æ–∫ –≥–∏–ª—å–¥–∏–π —Å–µ—Ä–≤–µ—Ä–∞",
            description="**–í—ã–±–µ—Ä–∏ –≥–∏–ª—å–¥–∏—é –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:**\n`!–≤—Å—Ç—É–ø–∏—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ]`",
            color=discord.Color.gold()
        )

        for name, –≥–∏–ª—å–¥–∏—è in economy["guilds"].items():
            members_count = len(–≥–∏–ª—å–¥–∏—è.get("members", []))
            level = –≥–∏–ª—å–¥–∏—è.get("level", 1)
            messages = –≥–∏–ª—å–¥–∏—è.get("messages", 0)
            voice_minutes = –≥–∏–ª—å–¥–∏—è.get("voice_minutes", 0)
            voice_hours = int(voice_minutes // 60)
            embed.add_field(
                name=f"üè∑Ô∏è {name} (—É—Ä. {level})",
                value=(
                    f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {members_count}\n"
                    f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π:** {messages}\n"
                    f"üïí **–í–æ–π—Å:** {voice_hours} —á."
                ),
                inline=False
            )
        embed.set_footer(text="Free Fire United üíô by TheDodo")
        await ctx.send(embed=embed)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥–∏–ª—å–¥–∏–∏ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –µ–≥–æ –≥–∏–ª—å–¥–∏–∏
    –Ω–∞–∑–≤–∞–Ω–∏–µ = user["guild"]
    –≥–∏–ª—å–¥–∏—è = economy["guilds"].get(–Ω–∞–∑–≤–∞–Ω–∏–µ)

    if not –≥–∏–ª—å–¥–∏—è:
        await ctx.send("‚ùå –ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    owner_id = –≥–∏–ª—å–¥–∏—è["owner"]
    avatar_url = –≥–∏–ª—å–¥–∏—è.get("avatar")

    embed = discord.Embed(
        title=f"üè∞ –ì–∏–ª—å–¥–∏—è: {–Ω–∞–∑–≤–∞–Ω–∏–µ}",
        color=discord.Color.gold()
    )

    embed.add_field(name="üëë –í–ª–∞–¥–µ–ª–µ—Ü", value=f"<@{owner_id}>", inline=True)

    guild_level = –≥–∏–ª—å–¥–∏—è.get("level", 1)
    guild_exp = –≥–∏–ª—å–¥–∏—è.get("exp", 0)
    exp_needed = guild_level * 1000
    embed.add_field(
        name="üìà –£—Ä–æ–≤–µ–Ω—å –≥–∏–ª—å–¥–∏–∏",
        value=f"–£—Ä–æ–≤–µ–Ω—å: **{guild_level}**\n–û–ø—ã—Ç: {guild_exp}/{exp_needed}",
        inline=False
    )

    members_info = []
    for member_id in –≥–∏–ª—å–¥–∏—è["members"]:
        member_data = economy["users"].get(str(member_id), {})
        —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ = f"<@{member_id}>"
        voice_hours = member_data.get("voice_time", 0) // 3600
        messages_count = member_data.get("messages", 0)
        members_info.append(f"{—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ} ‚Äî üïí {voice_hours} —á –≤ –≤–æ–π—Å–µ | üí¨ {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π")

    if members_info:
        embed.add_field(
            name="üìú –£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value="\n".join(members_info),
            inline=False
        )


    # –í —Ü–∏–∫–ª–µ –ø–æ –≥–∏–ª—å–¥–∏—è–º:
    requests_count = len(–≥–∏–ª—å–¥–∏—è.get("requests", [])) if –≥–∏–ª—å–¥–∏—è.get("privacy") == "request" else 0
    requests_line = f"\nüì® **–ó–∞—è–≤–æ–∫:** {requests_count}" if requests_count else ""
    privacy = –≥–∏–ª—å–¥–∏—è.get("privacy", "open")
    privacy_text = {
        "open": "–û—Ç–∫—Ä—ã—Ç–∞—è",
        "request": "–ü–æ –∑–∞—è–≤–∫–µ",
        "closed": "–ó–∞–∫—Ä—ã—Ç–∞—è"
    }.get(privacy, "–û—Ç–∫—Ä—ã—Ç–∞—è")
     # ...existing code...
    members_count = len(–≥–∏–ª—å–¥–∏—è.get("members", []))
    level = –≥–∏–ª—å–¥–∏—è.get("level", 1)
    messages = –≥–∏–ª—å–¥–∏—è.get("messages", 0)
    voice_minutes = –≥–∏–ª—å–¥–∏—è.get("voice_minutes", 0)
    voice_hours = int(voice_minutes // 60)
    requests_count = len(–≥–∏–ª—å–¥–∏—è.get("requests", [])) if –≥–∏–ª—å–¥–∏—è.get("privacy") == "request" else 0
    requests_line = f"\nüì® **–ó–∞—è–≤–æ–∫:** {requests_count}" if requests_count else ""
    privacy = –≥–∏–ª—å–¥–∏—è.get("privacy", "open")
    privacy_text = {
        "open": "–û—Ç–∫—Ä—ã—Ç–∞—è",
        "request": "–ü–æ –∑–∞—è–≤–∫–µ",
        "closed": "–ó–∞–∫—Ä—ã—Ç–∞—è"
    }.get(privacy, "–û—Ç–∫—Ä—ã—Ç–∞—è")
    embed.add_field(
        name=f"üîí **–¢–∏–ø:** {privacy_text}{requests_line}",
        value="\u200b",
        inline=False
    )
# ...existing code...

    embed.set_footer(text="Free Fire United üíô by TheDodo")

    if avatar_url:
        embed.set_thumbnail(url=avatar_url)

    await ctx.send(embed=embed)


@bot.command()
async def –∑–∞—è–≤–∫–∏(ctx):
    user_id = str(ctx.author.id)
    user = economy["users"].get(user_id)
    if not user or not user.get("guild"):
        await ctx.send("‚ùå –¢—ã –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏.")
        return
    –Ω–∞–∑–≤–∞–Ω–∏–µ = user["guild"]
    –≥–∏–ª—å–¥–∏—è = economy["guilds"].get(–Ω–∞–∑–≤–∞–Ω–∏–µ)
    if not –≥–∏–ª—å–¥–∏—è or str(–≥–∏–ª—å–¥–∏—è["owner"]) != user_id:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –≥–∏–ª—å–¥–∏–∏ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.")
        return
    if –≥–∏–ª—å–¥–∏—è.get("privacy") != "request":
        await ctx.send("‚ùå –í–∞—à–∞ –≥–∏–ª—å–¥–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫–∏.")
        return
    –∑–∞—è–≤–∫–∏ = –≥–∏–ª—å–¥–∏—è.get("requests", [])
    if not –∑–∞—è–≤–∫–∏:
        await ctx.send("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    embed = discord.Embed(
        title=f"üì® –ó–∞—è–≤–∫–∏ –≤ –≥–∏–ª—å–¥–∏—é {–Ω–∞–∑–≤–∞–Ω–∏–µ}",
        color=discord.Color.gold()
    )
    for i, uid in enumerate(–∑–∞—è–≤–∫–∏, 1):
        embed.add_field(
            name=f"{i}. <@{uid}>",
            value=f"–ü—Ä–∏–Ω—è—Ç—å: `!–ø—Ä–∏–Ω—è—Ç—å {uid} {–Ω–∞–∑–≤–∞–Ω–∏–µ}`\n–û—Ç–∫–ª–æ–Ω–∏—Ç—å: `!–æ—Ç–∫–ª–æ–Ω–∏—Ç—å {uid} {–Ω–∞–∑–≤–∞–Ω–∏–µ}`",
            inline=False
        )
    await ctx.send(embed=embed)

    
@bot.command()
async def —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–∞–≤—É(ctx):
    user_id = str(ctx.author.id)
    user = economy["users"].get(user_id)

    if not user or not user["guild"]:
        await ctx.send("üò¢ –¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥–∏–ª—å–¥–∏–∏.")
        return

    guild_name = user["guild"]
    –≥–∏–ª—å–¥–∏—è = economy["guilds"].get(guild_name)

    if –≥–∏–ª—å–¥–∏—è["owner"] != user_id:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –≥–∏–ª—å–¥–∏–∏ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –∞–≤—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
    if not ctx.message.attachments:
        await ctx.send("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏.")
        return

    attachment = ctx.message.attachments[0]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if not attachment.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
        await ctx.send("üìÅ –¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (.png, .jpg, .jpeg, .gif) –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫–∞–∫ –∞–≤–∞—Ç–∞—Ä–∫–∞.")
        return

    –≥–∏–ª—å–¥–∏—è["avatar"] = attachment.url
    schedule_save()
    await ctx.send(f"üñº –ê–≤–∞—Ç–∞—Ä–∫–∞ –≥–∏–ª—å–¥–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n{attachment.url}")


@bot.command()
async def —É–¥–∞–ª–∏—Ç—å_–∞–≤—É(ctx):
    user_id = str(ctx.author.id)
    user = economy["users"].get(user_id)

    if not user or not user.get("guild"):
        await ctx.send("üò¢ –¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥–∏–ª—å–¥–∏–∏.")
        return

    –Ω–∞–∑–≤–∞–Ω–∏–µ = user["guild"]
    –≥–∏–ª—å–¥–∏—è = economy["guilds"].get(–Ω–∞–∑–≤–∞–Ω–∏–µ)

    if str(ctx.author.id) != str(–≥–∏–ª—å–¥–∏—è["owner"]):
        await ctx.send("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –≥–∏–ª—å–¥–∏–∏ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É!")
        return

    if not –≥–∏–ª—å–¥–∏—è.get("avatar"):
        await ctx.send("üö´ –£ –≥–∏–ª—å–¥–∏–∏ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.")
        return

    –≥–∏–ª—å–¥–∏—è["avatar"] = None
    save_economy()
    await ctx.send(f"üóë –ê–≤–∞—Ç–∞—Ä–∫–∞ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ **{–Ω–∞–∑–≤–∞–Ω–∏–µ}** —É–¥–∞–ª–µ–Ω–∞!")



@bot.command()
async def –≤—Å—Ç—É–ø–∏—Ç—å(ctx, *, –Ω–æ–º–µ—Ä_–∏–ª–∏_–Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    user_id = str(ctx.author.id)
    user = economy["users"].setdefault(user_id, {"balance": 0, "guild": None, "items": []})

    if user["guild"]:
        await ctx.send("‚ùå –¢—ã —É–∂–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—ã–π–¥–∏ –∏–∑ –Ω–µ—ë, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –¥—Ä—É–≥—É—é.")
        return

    # –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞
    guilds_list = list(economy["guilds"].items())
    if –Ω–æ–º–µ—Ä_–∏–ª–∏_–Ω–∞–∑–≤–∞–Ω–∏–µ.isdigit():
        idx = int(–Ω–æ–º–µ—Ä_–∏–ª–∏_–Ω–∞–∑–≤–∞–Ω–∏–µ) - 1
        if idx < 0 or idx >= len(guilds_list):
            await ctx.send("‚ùå –ì–∏–ª—å–¥–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        –Ω–∞–∑–≤–∞–Ω–∏–µ, –≥–∏–ª—å–¥–∏—è = guilds_list[idx]
    else:
        –Ω–∞–∑–≤–∞–Ω–∏–µ = –Ω–æ–º–µ—Ä_–∏–ª–∏_–Ω–∞–∑–≤–∞–Ω–∏–µ
        –≥–∏–ª—å–¥–∏—è = economy["guilds"].get(–Ω–∞–∑–≤–∞–Ω–∏–µ)
        if not –≥–∏–ª—å–¥–∏—è:
            await ctx.send("‚ùå –ì–∏–ª—å–¥–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

    privacy = –≥–∏–ª—å–¥–∏—è.get("privacy", "open")
    if privacy == "closed":
        await ctx.send("üîí –í —ç—Ç—É –≥–∏–ª—å–¥–∏—é –º–æ–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    if privacy == "request":
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        –≥–∏–ª—å–¥–∏—è.setdefault("requests", [])
        if user_id in –≥–∏–ª—å–¥–∏—è["requests"]:
            await ctx.send("üìù –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –≤ —ç—Ç—É –≥–∏–ª—å–¥–∏—é.")
            return
        –≥–∏–ª—å–¥–∏—è["requests"].append(user_id)
        schedule_save()
        await ctx.send(f"üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ **{–Ω–∞–∑–≤–∞–Ω–∏–µ}** –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return

    # –û—Ç–∫—Ä—ã—Ç–∞—è –≥–∏–ª—å–¥–∏—è
    –≥–∏–ª—å–¥–∏—è["members"].append(user_id)
    user["guild"] = –Ω–∞–∑–≤–∞–Ω–∏–µ
    schedule_save()
    await ctx.send(f"‚úÖ –¢—ã –≤—Å—Ç—É–ø–∏–ª –≤ –≥–∏–ª—å–¥–∏—é **{–Ω–∞–∑–≤–∞–Ω–∏–µ}**!")


@bot.command()
async def –ø—Ä–∏–Ω—è—Ç—å(ctx, user_id: int, *, –Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    –≥–∏–ª—å–¥–∏—è = economy["guilds"].get(–Ω–∞–∑–≤–∞–Ω–∏–µ)
    if not –≥–∏–ª—å–¥–∏—è or str(ctx.author.id) != str(–≥–∏–ª—å–¥–∏—è["owner"]):
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏.")
        return
    user = economy["users"].get(str(user_id))
    if not user or user["guild"]:
        await ctx.send("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥–∏–ª—å–¥–∏–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    –≥–∏–ª—å–¥–∏—è["members"].append(str(user_id))
    user["guild"] = –Ω–∞–∑–≤–∞–Ω–∏–µ
    schedule_save()
    await ctx.send(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@{user_id}> –ø—Ä–∏–Ω—è—Ç –≤ –≥–∏–ª—å–¥–∏—é **{–Ω–∞–∑–≤–∞–Ω–∏–µ}**!")

@bot.command()
async def –æ—Ç–∫–ª–æ–Ω–∏—Ç—å(ctx, user_id: int, *, –Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    –≥–∏–ª—å–¥–∏—è = economy["guilds"].get(–Ω–∞–∑–≤–∞–Ω–∏–µ)
    if not –≥–∏–ª—å–¥–∏—è or str(ctx.author.id) != str(–≥–∏–ª—å–¥–∏—è["owner"]):
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å –∑–∞—è–≤–∫–∏.")
        return
    await ctx.send(f"‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{user_id}> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.") 



@bot.command()
async def –≤—ã–π—Ç–∏(ctx):
    user_id = str(ctx.author.id)
    user = economy["users"].get(user_id)

    if not user or not user["guild"]:
        await ctx.send("‚ùå –¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥–∏–ª—å–¥–∏–∏.")
        return

    guild_name = user["guild"]
    guild = economy["guilds"].get(guild_name)

    if guild["owner"] == user_id:
        await ctx.send("‚ùå –¢—ã ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –≥–∏–ª—å–¥–∏–∏. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–¥–∞–π –ø—Ä–∞–≤–∞ –∏–ª–∏ —É–¥–∞–ª–∏ –≥–∏–ª—å–¥–∏—é.")
        return

    guild["members"].remove(user_id)
    user["guild"] = None
    schedule_save()
    await ctx.send("üö™ –¢—ã –ø–æ–∫–∏–Ω—É–ª –≥–∏–ª—å–¥–∏—é.")


@bot.command()
async def —É–¥–∞–ª–∏—Ç—å_–≥–∏–ª—å–¥–∏—é(ctx):
    user_id = str(ctx.author.id)
    user = economy["users"].get(user_id)

    if not user or not user["guild"]:
        await ctx.send("‚ùå –¢—ã –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏.")
        return

    guild_name = user["guild"]
    guild = economy["guilds"].get(guild_name)

    if guild["owner"] != user_id:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –≥–∏–ª—å–¥–∏—é.")
        return

    embed = discord.Embed(
        title="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–∏–ª—å–¥–∏–∏",
        description=f"–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≥–∏–ª—å–¥–∏—é **{guild_name}**?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–ù–∞–∂–º–∏ ‚úÖ —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ ‚ùå —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
        color=discord.Color.red()
    )
    confirm_msg = await ctx.send(embed=embed)
    await confirm_msg.add_reaction("‚úÖ")
    await confirm_msg.add_reaction("‚ùå")

    def check(reaction, user_check):
        return (
            user_check == ctx.author and
            str(reaction.emoji) in ["‚úÖ", "‚ùå"] and
            reaction.message.id == confirm_msg.id
        )

    try:
        reaction, _ = await bot.wait_for("reaction_add", timeout=30.0, check=check)
    except asyncio.TimeoutError:
        await confirm_msg.edit(content="‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –£–¥–∞–ª–µ–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    if str(reaction.emoji) == "‚úÖ":
        for member_id in guild["members"]:
            if member_id in economy["users"]:
                economy["users"][member_id]["guild"] = None
        del economy["guilds"][guild_name]
        schedule_save()
        await ctx.send(embed=discord.Embed(
            title="üóëÔ∏è –ì–∏–ª—å–¥–∏—è —É–¥–∞–ª–µ–Ω–∞",
            description=f"–ì–∏–ª—å–¥–∏—è **{guild_name}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            color=discord.Color.red()
        ))
    else:
        await ctx.send(embed=discord.Embed(
            title="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            description="–£–¥–∞–ª–µ–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            color=discord.Color.gold()
        ))


@bot.command()
async def —Å–ø–∏—Å–æ–∫_–≥–∏–ª—å–¥–∏–∏(ctx):
    if not economy["guilds"]:
        await ctx.send("üò¢ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥–∏–ª—å–¥–∏–∏.")
        return

    embed = discord.Embed(
        title="üè∞ –°–ø–∏—Å–æ–∫ –≥–∏–ª—å–¥–∏–π —Å–µ—Ä–≤–µ—Ä–∞",
        description="**–í—Å—Ç—É–ø–∏—Ç—å: !–≤—Å—Ç—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ]**",
        color=discord.Color.gold()
    )

    for idx, (name, –≥–∏–ª—å–¥–∏—è) in enumerate(economy["guilds"].items(), 1):
        members_count = len(–≥–∏–ª—å–¥–∏—è.get("members", []))
        level = –≥–∏–ª—å–¥–∏—è.get("level", 1)
        messages = –≥–∏–ª—å–¥–∏—è.get("messages", 0)
        voice_minutes = –≥–∏–ª—å–¥–∏—è.get("voice_minutes", 0)
        voice_hours = int(voice_minutes // 60)
        requests_count = len(–≥–∏–ª—å–¥–∏—è.get("requests", [])) if –≥–∏–ª—å–¥–∏—è.get("privacy") == "request" else 0
        requests_line = f"\nüì® **–ó–∞—è–≤–æ–∫:** {requests_count}" if requests_count else ""
        privacy = –≥–∏–ª—å–¥–∏—è.get("privacy", "open")
        privacy_text = {
            "open": "–û—Ç–∫—Ä—ã—Ç–∞—è",
            "request": "–ü–æ –∑–∞—è–≤–∫–µ",
            "closed": "–ó–∞–∫—Ä—ã—Ç–∞—è"
        }.get(privacy, "–û—Ç–∫—Ä—ã—Ç–∞—è")
        embed.add_field(
            name=f"{idx}. {name} (—É—Ä. {level})",
            value=(
                f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {members_count}\n"
                f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π:** {messages}\n"
                f"üïí **–í–æ–π—Å:** {voice_hours} —á.\n"
                f"üîí **–¢–∏–ø:** {privacy_text}"
                f"{requests_line}"
            ),
            inline=False
        )
    embed.set_footer(text="Free Fire United üíô by TheDodo")
    await ctx.send(embed=embed)


@bot.command()
async def –º–∞–≥–∞–∑–∏–Ω(ctx):
    embed = discord.Embed(title="üõí –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤", color=discord.Color.gold())
    for item in store_items.values():
        embed.add_field(
            name=f"{item['name']} ‚Äî {item['price']} FFCoin",
            value=item['description'],
            inline=False
        )
    await ctx.send(embed=embed)

@bot.command()
async def –∫—É–ø–∏—Ç—å(ctx, *, –Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    user_id = str(ctx.author.id)
    user = economy["users"].setdefault(user_id, {"balance": 0, "guild": None, "items": []})

    item = store_items.get(–Ω–∞–∑–≤–∞–Ω–∏–µ.lower())
    if not item:
        await ctx.send("‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        return

    price = item["price"]
    if user["balance"] < price:
        await ctx.send("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–æ–ª—å
    if item.get("type") == "—Ä–æ–ª—å":
        role_name = item["name"]
        role = discord.utils.get(ctx.guild.roles, name=role_name)

        if not role:
            await ctx.send(f"‚ùå –†–æ–ª—å `{role_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            return
        
        try:
            await ctx.author.add_roles(role)
        except discord.Forbidden:
            await ctx.send("‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –≤—ã–¥–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å.")
            return

        await ctx.send(f"üéâ –¢—ã –∫—É–ø–∏–ª —Ä–æ–ª—å **{role.name}** –∑–∞ {price} FFCoin!")

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    else:
        user.setdefault("items", []).append(item["name"])
        await ctx.send(f"‚úÖ –¢—ã –∫—É–ø–∏–ª **{item['name']}** –∑–∞ {price} FFCoin!")

    # –ë–∞–ª–∞–Ω—Å —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–∏
    user["balance"] -= price
    schedule_save()


@bot.command()
async def –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å(ctx):
    user_id = str(ctx.author.id)
    user = economy["users"].setdefault(user_id, {"balance": 0, "guild": None, "items": []})
    items = user.get("items", [])

    if not items:
        await ctx.send("üéí –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç...")
        return

    inventory_text = "\n".join([f"‚Ä¢ {item}" for item in items])
    await ctx.send(f"üéí **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {ctx.author.display_name}:**\n{inventory_text}")

@bot.command(name="–¥–æ–±–∞–≤–∏—Ç—å_—Ç–æ–≤–∞—Ä")
@commands.has_permissions(administrator=True)
async def –¥–æ–±–∞–≤–∏—Ç—å_—Ç–æ–≤–∞—Ä(ctx, *, —Å–æ–æ–±—â–µ–Ω–∏–µ):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
        —á–∞—Å—Ç–∏ = dict(—á–∞—Å—Ç—å.split("=", 1) for —á–∞—Å—Ç—å in —Å–æ–æ–±—â–µ–Ω–∏–µ.split(" ") if "=" in —á–∞—Å—Ç—å)
        —Ç–∏–ø = —á–∞—Å—Ç–∏.get("—Ç–∏–ø", "").lower()
        –Ω–∞–∑–≤–∞–Ω–∏–µ = —á–∞—Å—Ç–∏.get("–Ω–∞–∑–≤–∞–Ω–∏–µ", "").lower()
        —Ü–µ–Ω–∞_str = —á–∞—Å—Ç–∏.get("—Ü–µ–Ω–∞", "0")
        –æ–ø–∏—Å–∞–Ω–∏–µ = —á–∞—Å—Ç–∏.get("–æ–ø–∏—Å–∞–Ω–∏–µ", "")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
        if —Ç–∏–ø not in ["–ø—Ä–µ–¥–º–µ—Ç", "—Ä–æ–ª—å"]:
            await ctx.send("‚ùó `—Ç–∏–ø` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–±–æ `–ø—Ä–µ–¥–º–µ—Ç`, –ª–∏–±–æ `—Ä–æ–ª—å`.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not –Ω–∞–∑–≤–∞–Ω–∏–µ or not –æ–ø–∏—Å–∞–Ω–∏–µ:
            await ctx.send("‚ùó –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –§–æ—Ä–º–∞—Ç:\n`!–¥–æ–±–∞–≤–∏—Ç—å_—Ç–æ–≤–∞—Ä —Ç–∏–ø=—Ä–æ–ª—å|–ø—Ä–µ–¥–º–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ=–∏–º—è —Ü–µ–Ω–∞=—á–∏—Å–ª–æ –æ–ø–∏—Å–∞–Ω–∏–µ=—Ç–µ–∫—Å—Ç`")
            return

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ
        try:
            —Ü–µ–Ω–∞ = int(—Ü–µ–Ω–∞_str)
        except ValueError:
            await ctx.send("‚ùó –£–∫–∞–∂–∏ **—á–∏—Å–ª–æ–≤—É—é —Ü–µ–Ω—É**. –ü—Ä–∏–º–µ—Ä: `—Ü–µ–Ω–∞=1000`")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω
        store_items[–Ω–∞–∑–≤–∞–Ω–∏–µ] = {
            "type": —Ç–∏–ø,
            "name": –Ω–∞–∑–≤–∞–Ω–∏–µ.capitalize(),
            "price": —Ü–µ–Ω–∞,
            "description": –æ–ø–∏—Å–∞–Ω–∏–µ
        }

        schedule_save()
        await ctx.send(f"‚úÖ {—Ç–∏–ø.capitalize()} **{–Ω–∞–∑–≤–∞–Ω–∏–µ.capitalize()}** –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ {—Ü–µ–Ω–∞} –º–æ–Ω–µ—Ç.")
        
    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")




@bot.command(name="—Ö–µ–ª–ø")
async def help_command(ctx):
    embed = discord.Embed(
        title="üìú –ö–æ–º–∞–Ω–¥—ã TheDodo Bot",
        description="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:",
        color=discord.Color.gold()
    )
    embed.add_field(name="–≠–ö–û–ù–û–ú–ò–ö–ê", value="", inline=False)
    embed.add_field(name="üíº !—Ä–∞–±–æ—Ç–∞", value="–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)", inline=False)
    embed.add_field(name="üéÅ !–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π", value="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", inline=False)
    embed.add_field(name="üí∞ !–±–∞–ª–∞–Ω—Å", value="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", inline=False)
    embed.add_field(name="üèÜ !–ª–∏–¥–µ—Ä—ã", value="–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É", inline=False)

    embed.add_field(name="–ú–ê–ì–ê–ó–ò–ù", value="", inline=False)
    embed.add_field(name="üè™ !–º–∞–≥–∞–∑–∏–Ω", value="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤", inline=False)
    embed.add_field(name="üõí !–∫—É–ø–∏—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ]", value="–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞", inline=False)
    embed.add_field(name="üéí !–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", value="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", inline=False)

    embed.add_field(name="–ì–ò–õ–¨–î–ò–Ø", value="", inline=False)
    embed.add_field(name="üè∞ !—Å–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ]", value="–°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é (10,000 –º–æ–Ω–µ—Ç)", inline=False)
    embed.add_field(name="üèò !–≥–∏–ª—å–¥–∏—è", value="–ò–Ω—Ñ–æ –æ —Ç–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏", inline=False)
    embed.add_field(name="‚ûï !–≤—Å—Ç—É–ø–∏—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ]", value="–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥–∏–ª—å–¥–∏—é", inline=False)
    embed.add_field(name="üö™ !–≤—ã–π—Ç–∏", value="–ü–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –≥–∏–ª—å–¥–∏—é", inline=False)
    embed.add_field(name="üóëÔ∏è !—É–¥–∞–ª–∏—Ç—å_–≥–∏–ª—å–¥–∏—é", value="–£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –≥–∏–ª—å–¥–∏—é (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)", inline=False)
    embed.add_field(name="üñº !—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–∞–≤—É", value="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –≥–∏–ª—å–¥–∏–∏", inline=False)
    embed.add_field(name="‚öîÔ∏è !–±–∏—Ç–≤–∞", value="–ü—Ä–æ–≥—Ä–µ—Å—Å –±–∏—Ç–≤—ã –≥–∏–ª—å–¥–∏–π", inline=False)
    embed.add_field(name="üìä !—Ç–æ–ø_–≥–∏–ª—å–¥–∏–π", value="–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–∏–ª—å–¥–∏–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º", inline=False)

    
    embed.set_footer(text="Free Fire United üíô by TheDodo")

    await ctx.send(embed=embed)


@bot.command(name="–∞–¥–º–∏–Ω")
@commands.has_permissions(administrator=True)
async def help_command(ctx):
    embed = discord.Embed(
        title="üìú –ê–¥–º–∏–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        description="—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:",
        color=discord.Color.blue()
    )

 # ‚öôÔ∏è –ê–¥–º–∏–Ω
    embed.add_field(name="üõçÔ∏è !–¥–æ–±–∞–≤–∏—Ç—å_—Ç–æ–≤–∞—Ä", value="(–ê–¥–º–∏–Ω) –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω", inline=False)
    embed.add_field(name="üóëÔ∏è !—É–¥–∞–ª–∏—Ç—å_—Ç–æ–≤–∞—Ä [–Ω–∞–∑–≤–∞–Ω–∏–µ]", value="(–ê–¥–º–∏–Ω) –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", inline=False)
    embed.add_field(name="üéÅ !—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ [–≤—ã–¥–∞—Ç—å|–æ—Ç–Ω—è—Ç—å] @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º–∞", value="(–ê–¥–º–∏–Ω) –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞", inline=False)
    embed.add_field(name="üèÜ !–Ω–∞–≥—Ä–∞–¥–∏—Ç—å_–≥–∏–ª—å–¥–∏—é [–Ω–∞–∑–≤–∞–Ω–∏–µ]", value="(–ê–¥–º–∏–Ω) –í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –≤—Å–µ–π –≥–∏–ª—å–¥–∏–∏", inline=False)

    embed.set_footer(text="Admins Team")

    await ctx.send(embed=embed)

@bot.command()
@commands.has_permissions(administrator=True)
async def —É–¥–∞–ª–∏—Ç—å_—Ç–æ–≤–∞—Ä(ctx, *, –Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    –Ω–∞–∑–≤–∞–Ω–∏–µ = –Ω–∞–∑–≤–∞–Ω–∏–µ.lower()
    
    if –Ω–∞–∑–≤–∞–Ω–∏–µ not in store_items:
        await ctx.send("‚ùå –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        return

    del store_items[–Ω–∞–∑–≤–∞–Ω–∏–µ]
    schedule_save()
    await ctx.send(f"üóëÔ∏è –¢–æ–≤–∞—Ä **{–Ω–∞–∑–≤–∞–Ω–∏–µ}** —É–¥–∞–ª—ë–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.")


@bot.command()
@commands.has_permissions(administrator=True)
async def —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ(ctx, –¥–µ–π—Å—Ç–≤–∏–µ: str, —É—á–∞—Å—Ç–Ω–∏–∫: discord.Member, —Å—É–º–º–∞: int):
    user_id = str(—É—á–∞—Å—Ç–Ω–∏–∫.id)
    user = economy["users"].setdefault(user_id, {"balance": 0, "guild": None, "items": []})

    if –¥–µ–π—Å—Ç–≤–∏–µ.lower() == "–≤—ã–¥–∞—Ç—å":
        user["balance"] += —Å—É–º–º–∞
        await ctx.send(f"üí∏ {—É—á–∞—Å—Ç–Ω–∏–∫.mention} –ø–æ–ª—É—á–∏–ª **+{—Å—É–º–º–∞} FFCoin**.")

    elif –¥–µ–π—Å—Ç–≤–∏–µ.lower() == "–æ—Ç–Ω—è—Ç—å":
        user["balance"] = max(0, user["balance"] - —Å—É–º–º–∞)
        await ctx.send(f"üí∏ –£ {—É—á–∞—Å—Ç–Ω–∏–∫.mention} –æ—Ç–Ω—è—Ç–æ **-{—Å—É–º–º–∞} FFCoin**.")

    else:
        await ctx.send("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π `–≤—ã–¥–∞—Ç—å` –∏–ª–∏ `–æ—Ç–Ω—è—Ç—å`.\n–ü—Ä–∏–º–µ—Ä: `!—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–¥–∞—Ç—å @user 1000`")


# !–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π
@bot.command()
async def –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π(ctx):
    user_id = str(ctx.author.id)
    user = economy["users"].setdefault(user_id, {
        "balance": 0, "guild": None, "items": [], "last_daily": None
    })

    cooldown_hours = 24
    left = time_left(user.get("last_daily"), cooldown_hours)
    if left:
        embed = discord.Embed(
            title="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
            description=f"üìÖ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: **{left}**",
            color=discord.Color.gold()
        )
        await ctx.send(embed=embed)
        return

    reward = random.randint(200, 400)
    user["balance"] += reward
    user["last_daily"] = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    schedule_save()

    embed = discord.Embed(
        title="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
        description=f"–¢—ã –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: **{reward} FFCoin**!",
        color=discord.Color.gold()
    )
    embed.add_field(name="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", value=f"**{user['balance']} FFCoin**", inline=False)
    embed.add_field(name="‚è≥ –°–ª–µ–¥—É—é—â–∞—è –µ–∂–µ–¥–Ω–µ–≤–∫–∞", value=f"**{cooldown_hours} —á**", inline=False)
    embed.set_footer(text="Free Fire United üíô by TheDodo")
    await ctx.send(embed=embed)

     

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user_id = str(message.author.id)
    user = economy["users"].setdefault(user_id, {"balance": 0, "guild": None, "items": []})

    if user["guild"]:
        guild_name = user["guild"]
        –≥–∏–ª—å–¥–∏—è = economy["guilds"].setdefault(guild_name, {"owner": None, "members": [], "messages": 0, "voice_minutes": 0})
        –≥–∏–ª—å–¥–∏—è["messages"] = –≥–∏–ª—å–¥–∏—è.get("messages", 0) + 1

    await bot.process_commands(message)


voice_times = {}

@bot.event
async def on_voice_state_update(member, before, after):
    user_id = str(member.id)
    user = economy["users"].get(user_id)
    if not user or not user["guild"]:
        return

    guild_name = user["guild"]
    –≥–∏–ª—å–¥–∏—è = economy["guilds"].setdefault(guild_name, {"owner": None, "members": [], "messages": 0, "voice_minutes": 0})

    if before.channel is None and after.channel is not None:
        # –ó–∞—à—ë–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π
        voice_times[user_id] = datetime.utcnow()

    elif before.channel is not None and after.channel is None:
        # –í—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
        if user_id in voice_times:
            duration = (datetime.utcnow() - voice_times[user_id]).total_seconds() / 60
            –≥–∏–ª—å–¥–∏—è["voice_minutes"] = –≥–∏–ª—å–¥–∏—è.get("voice_minutes", 0) + duration
            del voice_times[user_id]
            schedule_save()


@bot.command()
async def –±–∏—Ç–≤–∞(ctx):
    –ª–∏–¥–µ—Ä—ã = []
    for name, –≥–∏–ª—å–¥–∏—è in economy["guilds"].items():
        messages = –≥–∏–ª—å–¥–∏—è.get("messages", 0)
        minutes = –≥–∏–ª—å–¥–∏—è.get("voice_minutes", 0)
        –≤—ã–ø–æ–ª–Ω–µ–Ω–æ = messages >= 5000 and minutes >= 400 * 60

        –ª–∏–¥–µ—Ä—ã.append((name, messages, minutes, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ))

    –ª–∏–¥–µ—Ä—ã.sort(key=lambda x: (x[3], x[1] + x[2]), reverse=True)

    lines = []
    for i, (name, msg, mins, done) in enumerate(–ª–∏–¥–µ—Ä—ã, 1):
        status = "‚úÖ" if done else "‚ùå"
        lines.append(f"**{i}. {name}** ‚Äî {msg} —Å–æ–æ–±—â–µ–Ω–∏–π, {int(mins/60)} —á. –≤ –≤–æ–π—Å–µ {status}")

    await ctx.send("‚öîÔ∏è **–ü—Ä–æ–≥—Ä–µ—Å—Å –±–∏—Ç–≤—ã –≥–∏–ª—å–¥–∏–π:**\n" + "\n".join(lines))


@bot.command()
@commands.has_permissions(administrator=True)
async def –Ω–∞–≥—Ä–∞–¥–∏—Ç—å_–≥–∏–ª—å–¥–∏—é(ctx, *, –Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    –≥–∏–ª—å–¥–∏—è = economy["guilds"].get(–Ω–∞–∑–≤–∞–Ω–∏–µ)
    if not –≥–∏–ª—å–¥–∏—è:
        await ctx.send("‚ùå –ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    for member_id in –≥–∏–ª—å–¥–∏—è["members"]:
        user = economy["users"].get(member_id)
        if user:
            user["balance"] += 5000  # –∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ

    schedule_save()
    await ctx.send(f"üèÜ –ì–∏–ª—å–¥–∏—è **{–Ω–∞–∑–≤–∞–Ω–∏–µ}** –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∞, –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ 5000 FFCoin!")


@bot.command()
async def —Ç–æ–ø_–≥–∏–ª—å–¥–∏–π(ctx):
    —Ç–æ–ø = sorted(
        economy["guilds"].items(),
        key=lambda x: x[1].get("messages", 0) + x[1].get("voice_minutes", 0),
        reverse=True
    )[:10]

    embed = discord.Embed(
        title="üìä –¢–æ–ø –≥–∏–ª—å–¥–∏–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        description="–†–µ–π—Ç–∏–Ω–≥ –ø–æ —Å—É–º–º–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —á–∞—Å–æ–≤ –≤ –≤–æ–π—Å–µ",
        color=discord.Color.gold()
    )

    for i, (name, –≥–∏–ª—å–¥–∏—è) in enumerate(—Ç–æ–ø, 1):
        messages = –≥–∏–ª—å–¥–∏—è.get('messages', 0)
        voice_hours = int(–≥–∏–ª—å–¥–∏—è.get('voice_minutes', 0) // 60)
        embed.add_field(
            name=f"{i}. {name}",
            value=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: **{messages}**\nüïí –í–æ–π—Å: **{voice_hours} —á.**",
            inline=False
        )

    embed.set_footer(text="Free Fire United üíô by TheDodo")
    await ctx.send(embed=embed)


 # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
TOKEN = os.getenv("DISCORD_TOKEN")
if not TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è DISCORD_TOKEN")
else:
    bot.run(TOKEN)


